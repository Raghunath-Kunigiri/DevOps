
# Docker Image Optimization Guide â€” From 765 MB to 2.1 MB

This guide explains how I reduced a Docker image by **99.7% (765 MB â†’ 2.1 MB)** using best practices for size, speed, and cost optimization.

---

## ğŸ”¹ 1. Switch Base Image (Ubuntu â†’ Alpine/Distroless)

The base image dominates the size. Choose the smallest compatible image.

| Use Case | Recommended Base |
|-----------|------------------|
| Go / Rust / Static binary | `scratch` or `distroless/static` |
| Python / Node | `*-slim` or `alpine` |
| General minimal OS | `alpine` (~5 MB) |

---

## ğŸ”¹ 2. Use Multi-Stage Builds

Build in one stage, copy only whatâ€™s needed.

### Example (Go)

```dockerfile
FROM golang:1.21-alpine AS builder
WORKDIR /src
COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-s -w" -o /app/app

FROM scratch
COPY --from=builder /app/app /app
ENTRYPOINT ["/app"]
```

### Example (Node)

```dockerfile
FROM node:20 AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM node:20-slim
WORKDIR /app
COPY --from=builder /app/dist ./dist
RUN npm ci --omit=dev
CMD ["node", "dist/index.js"]
```

---

## ğŸ”¹ 3. Consolidate Layers

Combine RUN commands and clean caches:

```dockerfile
RUN apt-get update && apt-get install -y --no-install-recommends build-essential &&     rm -rf /var/lib/apt/lists/*
```

---

## ğŸ”¹ 4. Perfect Your `.dockerignore`

Exclude unnecessary files:

```
.git
node_modules
__pycache__
*.log
tests/
build/
dist/
```
This reduces build context and improves caching.

---

## ğŸ”¹ 5. Use Analyzer Tools

| Tool | Purpose |
|------|----------|
| `dive` | Layer-by-layer size analysis |
| `hadolint` | Dockerfile best practices |
| `trivy` | Security scanning |
| `docker-slim` | Automatic size reduction |
| `docker history` | Inspect layers |

Run before & after to quantify improvements.

---

## âœ… TL;DR Checklist

- [x] Add `.dockerignore`  
- [x] Use multi-stage builds  
- [x] Choose minimal base image  
- [x] Combine RUN steps & clear caches  
- [x] Install only production deps  
- [x] Analyze & iterate  

---

## âš¡ Results

| Step | Size (MB) | Reduction |
|------|------------|-----------|
| Original (Ubuntu base) | 765 | â€” |
| Switched to Alpine | 118 | 84.6% |
| Multi-stage applied | 31 | 95.9% |
| Distroless + cleanup | 2.1 | **99.7%** âœ… |

---

> **Smaller images = faster builds, deployments, and lower costs.**  
> Optimize once, benefit forever.

---

ğŸ“˜ Author: **Raghunath Kunigiri**  
ğŸ’¡ [Connect on LinkedIn](https://www.linkedin.com/in/raghunath-kunigiri)  
